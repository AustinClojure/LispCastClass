* 04:58 Starting the REPL

#+begin_src bash

  lein repl

#+end_src

#+begin_src clojure

  (load-file "video1.clj")

#+end_src

|-----------------|
| Bakery Commands |
|-----------------|
| grab            |
| release         |
| sequeeze        |
| scoop           |
| add-to-bowl     |
| pour-into-pan   |
| bake-pan        |
| cool-pan        |
| status          |
| start-over      |
|-----------------|


(status)

* 06:52 Bakery practice

#+begin_src clojure
  ;; basic commands
  (status)

  (grab :egg)
  (squeeze)
  (add-to-bowl)

  (grab :egg)
  (squeeze)
  (add-to-bowl)

  (mix)

  (start-over)

  ;; getting help
  (doc grab)
#+end_src

* 07:55 Cookie Recipe
1 egg
1 cup flour
1 cup sugar
1 stick butter

mix bowl
bake in pan for 30 minutes

let cool

* 08:02 Exercise  1 - Bake a cake

2 cups flour
2 eggs
1 cup milk
1 cup sugar

mix all ingredients
bake in pan for 25 minutes
let cool

* 10:31 Exercise  2 - Functions to add ingredients

#+begin_src clojure
(defn add-egg []
  (grab :egg)
  (squeeze)
  (add-to-bowl))

(defn add-sugar []
  (grab :cup)
  (scoop :sugar)
  (add-to-bowl)
  (release))
#+end_src
** Exercise 2 solution

#+begin_src clojure
(defn add-flour []
  (grab :cup)
  (scoop :flour)
  (add-to-bowl)
  (release))

(defn add-milk []
  (grab :cup)
  (scoop :milk)
  (add-to-bowl)
  (release))

(defn add-butter []
  (grab :butter)
  (add-to-bowl))
#+end_src

* 11:30 Exercise  3 - Bake a cake
** Cake recipe
2 cups flour
2 eggs
1 cup milk
1 cup sugar

mix all ingredients
bake in pan for 25 minutes
let cool

** Solution
#+begin_src clojure
(defn bake-cake []
  (add-flour)
  (add-flour)
  (add-sugar)
  (add-milk)
  (add-egg)
  (add-egg)

  (mix)

  (pour-into-pan)
  (bake-pan 25)
  (cool-pan))
#+end_src

#+RESULTS:
: #'user/bake-cake

* 15:48 Exercise  4 - Bake a cake with add

#+begin_src clojure
(defn add [ingredient]
  (cond
   (= ingredient :egg)
   (add-egg)
   (= ingredient :milk)
   (add-milk)
   (= ingredient :flour)
   (add-flour)
   (= ingredient :sugar)
   (add-sugar)
   (= ingredient :butter)
   (add-butter)
   :else
   (do
     (println "Unknown ingredient" ingredient)
     :error)))
#+end_src

** Solution
#+begin_src clojure
(defn bake-cake []
  (add :flour)
  (add :flour)
  (add :sugar)
  (add :milk)
  (add :egg)
  (add :egg)

  (mix)

  (pour-into-pan)
  (bake-pan 25)
  (cool-pan))
#+end_src

* 16:35 Exercise  5 - scooped?
** Solution
#+begin_src clojure
(defn scooped? [ingredient]
  (cond
   (= ingredient :milk)
   true
   (= ingredient :flour)
   true
   (= ingredient :sugar)
   true
   :else
   false))
#+end_src clojure

* 17:56 Exercise  6 - squeezed?
** Solution
#+begin_src clojure
(defn squeezed? [ingredient]
  (= ingredient :egg))
#+end_src clojure
* 18:29 Exercise  7 - simple?
** Solution
#+begin_src clojure
(defn simple? [ingredient]
  (= ingredient :butter))
#+end_src clojure

* 20:23 Exercise  8 - add-x
** solution
#+begin_src clojure
(defn add-squeezed [ingredient]
  (if (squeezed? ingredient)
    (do
      (grab ingredient)
      (squeeze)
      (add-to-bowl))
    (do
      (println "This function only works on squeezed ingredients. You asked me to squeeze" ingredient)
      :error)))

(defn add-scooped [ingredient]
  (if (scooped? ingredient)
    (do
      (grab :cup)
      (scoop ingredient)
      (add-to-bowl)
      (release))
    (do
      (println "This function only works on scooped ingredients. You asked me to scoop" ingredient)
      :error)))

(defn add-simple [ingredient]
  (if (simple? ingredient)
    (do
      (grab ingredient)
      (add-to-bowl))
    (do
      (println "This function only works on simple ingredients. You asked me to add" ingredient)
      :error)))
#+end_src

#+RESULTS:
: #'user/add-simple

* 24:30 Exercise  9 - dotimes
#+begin_src clojure
(defn add-eggs [n]
  (dotimes [e n]
    (add-egg)))
#+end_src

** Solution
#+begin_src clojure
(defn add-flour-cups [n]
  (dotimes [e n]
    (add-flour)))

(defn add-milk-cups [n]
  (dotimes [e n]
    (add-milk)))

(defn add-sugar-cups [n]
  (dotimes [e n]
    (add-sugar)))

(defn add-butters [n]
  (dotimes [e n]
    (add-butter)))
#+end_src clojure

#+RESULTS:
: #'user/add-butters

* 25:15 Exercise 10 - Baking a cake, again
#+begin_src clojure
(defn bake-cake []
  (add-eggs 2)
  (add-flour-cups 2)
  (add-milk-cups 1)
  (add-sugar-cups 1)

  (mix)

  (pour-into-pan)
  (bake-pan 25)
  (cool-pan))
#+end_src clojure
* 30:06 Exercise 11 - Variadic add

#+begin_src clojure
(defn add-squeezed
  ([ingredient]
     (add-squeezed ingredient 1))
  ([ingredient amount]
     (if (squeezed? ingredient)
       (do
         (dotimes [i amount]
           (grab ingredient)
           (squeeze)
           (add-to-bowl))
         :ok)
       (do
         (println "This function only works on squeezed ingredients. You asked me to squeeze" ingredient)
         :error))))

(defn add-scooped
  ([ingredient]
     (add-scooped ingredient 1))
  ([ingredient amount]
     (if (scooped? ingredient)
       (do
         (grab :cup)
         (dotimes [i amount]
          (scoop ingredient)
          (add-to-bowl))
         (release)
         :ok)
       (do
         (println "This function only works on scooped ingredients. You asked me to scoop" ingredient)
         :error))))

(defn add-simple
  ([ingredient]
     (add-simple ingredient 1))
  ([ingredient amount]
     (if (simple? ingredient)
       (do
         (dotimes [i amount]
           (grab ingredient)
           (add-to-bowl))
         :ok)
       (do
         (println "This function only works on simple ingredients. You asked me to add" ingredient)
         :error))))
#+end_src clojure

** Solution
#+begin_src clojure
(defn add
  ([ingredient]
     (add ingredient 1))
  ([ingredient amount]
     (cond
      (squeezed? ingredient)
      (add-squeezed ingredient amount)

      (simple? ingredient)
      (add-simple ingredient amount)

      (scooped? ingredient)
      (add-scooped ingredient amount)

      :else
      (do
        (println "I do not have the ingredient" ingredient)
        :error))))
#+end_src

* 31:02 Exercise 12 - Variadic cakes
** Solution
#+begin_src clojure
(defn bake-cake []
  (add :egg 2)
  (add :flour 2)
  (add :milk 1)
  (add :sugar 1)

  (mix)

  (pour-into-pan)
  (bake-pan 25)
  (cool-pan))
#+end_src

#+RESULTS:
: #'user/bake-cake

* 31:35 Exercise 13 - C is for cookie!
#+begin_src clojure
(defn bake-cookies []
  (add :egg 1)
  (add :flour 1)
  (add :butter 1)
  (add :sugar 1)

  (mix)

  (pour-into-pan)
  (bake-pan 30)
  (cool-pan))
#+end_src


